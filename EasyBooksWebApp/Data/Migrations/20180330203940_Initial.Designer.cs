// <auto-generated />
using EasyBooksWebApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace EasyBooksWebApp.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180330203940_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EasyBooksWebApp.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("EasyBooksWebApp.Models.Bill", b =>
                {
                    b.Property<long>("BillID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BillDate")
                        .HasColumnName("BillDate");

                    b.Property<string>("BillNo")
                        .HasColumnName("BillNo")
                        .HasMaxLength(60);

                    b.Property<DateTime>("DueDate")
                        .HasColumnName("DueDate");

                    b.Property<long>("SupplierID")
                        .HasColumnName("SupplierID");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnName("TotalAmount");

                    b.HasKey("BillID");

                    b.HasIndex("SupplierID");

                    b.ToTable("Bill");
                });

            modelBuilder.Entity("EasyBooksWebApp.Models.BillPayment", b =>
                {
                    b.Property<long>("BillPaymentID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("AmountPaid")
                        .HasColumnName("AmountPaid");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnName("PaymentDate");

                    b.Property<int>("PaymentMethodID")
                        .HasColumnName("PaymentMethodID");

                    b.Property<string>("ReferenceNo")
                        .HasColumnName("ReferenceNo")
                        .HasMaxLength(60);

                    b.Property<long>("SupplierID")
                        .HasColumnName("SupplierID");

                    b.HasKey("BillPaymentID");

                    b.HasIndex("PaymentMethodID");

                    b.HasIndex("SupplierID");

                    b.ToTable("BillPayment");
                });

            modelBuilder.Entity("EasyBooksWebApp.Models.Customer", b =>
                {
                    b.Property<long>("CustomerID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City")
                        .HasColumnName("City")
                        .HasMaxLength(60);

                    b.Property<string>("Email")
                        .HasColumnName("Email");

                    b.Property<string>("FirstMidName")
                        .IsRequired()
                        .HasColumnName("FirstMidName")
                        .HasMaxLength(60);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("LastName")
                        .HasMaxLength(60);

                    b.Property<string>("Notes")
                        .HasColumnName("Notes");

                    b.Property<string>("Phone")
                        .HasColumnName("Phone");

                    b.Property<string>("Pin")
                        .HasColumnName("Pin");

                    b.Property<string>("ProfileImageName")
                        .HasColumnName("ProfileImageName");

                    b.Property<int?>("StateID")
                        .HasColumnName("StateID");

                    b.Property<string>("Street")
                        .HasColumnName("Street");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("UserId");

                    b.HasKey("CustomerID");

                    b.HasIndex("StateID");

                    b.HasIndex("UserId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("EasyBooksWebApp.Models.Invoice", b =>
                {
                    b.Property<long>("InvoiceID")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CustomerID")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime>("DueDate")
                        .HasColumnName("DueDate");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnName("InvoiceDate");

                    b.Property<string>("InvoiceNo")
                        .HasColumnName("InvoiceNo")
                        .HasMaxLength(60);

                    b.Property<decimal>("TotalAmount")
                        .HasColumnName("TotalAmount");

                    b.HasKey("InvoiceID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("EasyBooksWebApp.Models.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Name")
                        .HasColumnName("Name")
                        .HasMaxLength(60);

                    b.HasKey("PaymentMethodID");

                    b.ToTable("PaymentMethod");
                });

            modelBuilder.Entity("EasyBooksWebApp.Models.ReceivePayment", b =>
                {
                    b.Property<long>("ReceivePaymentID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("AmountReceived")
                        .HasColumnName("AmountReceived");

                    b.Property<long>("CustomerID")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnName("PaymentDate");

                    b.Property<int>("PaymentMethodID")
                        .HasColumnName("PaymentMethodID");

                    b.Property<string>("ReferenceNo")
                        .HasColumnName("ReferenceNo")
                        .HasMaxLength(60);

                    b.HasKey("ReceivePaymentID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("PaymentMethodID");

                    b.ToTable("ReceivePayment");
                });

            modelBuilder.Entity("EasyBooksWebApp.Models.State", b =>
                {
                    b.Property<int>("StateID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(60);

                    b.HasKey("StateID");

                    b.ToTable("State");
                });

            modelBuilder.Entity("EasyBooksWebApp.Models.Supplier", b =>
                {
                    b.Property<long>("SupplierID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City")
                        .HasColumnName("City")
                        .HasMaxLength(60);

                    b.Property<string>("Company")
                        .HasColumnName("Company")
                        .HasMaxLength(60);

                    b.Property<string>("Email")
                        .HasColumnName("Email");

                    b.Property<string>("FirstMidName")
                        .IsRequired()
                        .HasColumnName("FirstMidName")
                        .HasMaxLength(60);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("LastName")
                        .HasMaxLength(60);

                    b.Property<string>("Notes")
                        .HasColumnName("Notes");

                    b.Property<string>("Phone")
                        .HasColumnName("Phone");

                    b.Property<string>("Pin")
                        .HasColumnName("Pin");

                    b.Property<string>("ProfileImageName")
                        .HasColumnName("ProfileImageName");

                    b.Property<int?>("StateID")
                        .HasColumnName("StateID");

                    b.Property<string>("Street")
                        .HasColumnName("Street");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("UserId");

                    b.HasKey("SupplierID");

                    b.HasIndex("StateID");

                    b.HasIndex("UserId");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EasyBooksWebApp.Models.Bill", b =>
                {
                    b.HasOne("EasyBooksWebApp.Models.Supplier", "Supplier")
                        .WithMany("Bills")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EasyBooksWebApp.Models.BillPayment", b =>
                {
                    b.HasOne("EasyBooksWebApp.Models.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EasyBooksWebApp.Models.Supplier", "Supplier")
                        .WithMany("BillPayments")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EasyBooksWebApp.Models.Customer", b =>
                {
                    b.HasOne("EasyBooksWebApp.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateID");

                    b.HasOne("EasyBooksWebApp.Models.ApplicationUser", "User")
                        .WithMany("Customers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EasyBooksWebApp.Models.Invoice", b =>
                {
                    b.HasOne("EasyBooksWebApp.Models.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EasyBooksWebApp.Models.ReceivePayment", b =>
                {
                    b.HasOne("EasyBooksWebApp.Models.Customer", "Customer")
                        .WithMany("ReceivePayments")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EasyBooksWebApp.Models.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EasyBooksWebApp.Models.Supplier", b =>
                {
                    b.HasOne("EasyBooksWebApp.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateID");

                    b.HasOne("EasyBooksWebApp.Models.ApplicationUser", "User")
                        .WithMany("Suppliers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EasyBooksWebApp.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EasyBooksWebApp.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EasyBooksWebApp.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EasyBooksWebApp.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
